import org.junit.Test;
import static org.junit.Assert.*;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

import org.junit.Before;

import com.jkmcllc.aupair01.pairing.AccountPairingResponse;
import com.jkmcllc.aupair01.pairing.PairingRequest;
import com.jkmcllc.aupair01.pairing.PairingResponse;
import com.jkmcllc.aupair01.pairing.impl.PairingService;
import com.jkmcllc.aupair01.pairing.strategy.Strategy;


/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 *
 * @author Jason Merecki, @date 8/9/16 4:59 PM
 */
public class PairingRequestTest {
   
    private PairingService pairingService = null;
    
    @Before
    public void setUp() {
        pairingService = PairingService.getInstance();
    }
    
    @Test
    public void buildAndPair1() {
        PairingRequest pairingRequest = PairingRequestBuilderTest.buildRequest1(false);
        commonPrintInput(pairingRequest);
        PairingResponse pairingResponse = pairingService.service(pairingRequest);
        commonTestAndPrintOutput(pairingResponse, 1);
        // test outcomes
        Map<String, AccountPairingResponse> responseByAccount = pairingResponse.getResultsByAccount();
        Map<String, List<Strategy>> account1234result = responseByAccount.get("account1").getStrategies();
        boolean found = findStrategy(account1234result, "MSFT", "CallVerticalShort", 2, new BigDecimal("1000"));
        assertTrue(found);
        found = findStrategy(account1234result, "MSFT", "PutVerticalLong", 4, new BigDecimal("0"));
        assertTrue(found);
        found = findStrategy(account1234result, "BP", "CallButterflyShort", 4, new BigDecimal("2000"));
        assertTrue(found);
        found = findStrategy(account1234result, "BP", "CallButterflyLong", 6, new BigDecimal("0"));
        assertTrue(found);
        found = findStrategy(account1234result, "BP", "PutButterflyLong", 6, new BigDecimal("0"));
        assertTrue(found);
        found = findStrategy(account1234result, "BP", "PutButterflyShort", 4, new BigDecimal("2000"));
        assertTrue(found);
    }
    
    @Test
    public void buildAndPair1_1() {
        PairingRequest pairingRequest = PairingRequestBuilderTest.buildRequest1_1();
        commonPrintInput(pairingRequest);
        PairingResponse pairingResponse = pairingService.service(pairingRequest);
        commonTestAndPrintOutput(pairingResponse, 1);
    }
    
    @Test
    public void buildAndPair1_2() {
        PairingRequest pairingRequest = PairingRequestBuilderTest.buildRequest1(true);
        commonPrintInput(pairingRequest);
        PairingResponse pairingResponse = pairingService.service(pairingRequest);
        commonTestAndPrintOutput(pairingResponse, 1);
    }
    
    @Test
    public void buildAndPair2() {
        PairingRequest pairingRequest = PairingRequestBuilderTest.buildRequest2();
        commonPrintInput(pairingRequest);
        PairingResponse pairingResponse = pairingService.service(pairingRequest);
        commonTestAndPrintOutput(pairingResponse, 1);
        // test outcomes; always want 7 long call verticals even though there is enough stock to make more covered calls
        Map<String, AccountPairingResponse> responseByAccount = pairingResponse.getResultsByAccount();
        Map<String, List<Strategy>> account3result = responseByAccount.get("account2").getStrategies();
        boolean found = findStrategy(account3result, "MSFT", "CallVerticalLongNoStock", 7, new BigDecimal("0"));
        assertTrue(found);
        found = findStrategy(account3result, "MSFT", "CoveredCall", 3, new BigDecimal("0"));
        assertTrue(found);
    }
    
    @Test
    public void buildAndPair3() {
        PairingRequest pairingRequest = PairingRequestBuilderTest.buildRequest3(false);
        commonPrintInput(pairingRequest);
        PairingResponse pairingResponse = pairingService.service(pairingRequest);
        commonTestAndPrintOutput(pairingResponse, 1);
        // test outcomes
        Map<String, AccountPairingResponse> responseByAccount = pairingResponse.getResultsByAccount();
        Map<String, List<Strategy>> account3result = responseByAccount.get("account3").getStrategies();
        boolean found = findStrategy(account3result, "GPRO", "IronButterflyShort", 4, new BigDecimal("2000"));
        assertTrue(found);
        found = findStrategy(account3result, "GPRO", "IronButterflyLong", 1, new BigDecimal("0"));
        assertTrue(found);
        found = findStrategy(account3result, "GPRO", "CallVerticalShort", 1, new BigDecimal("500"));
        assertTrue(found);
    }
    
    @Test
    public void buildAndPair3_1() {
        PairingRequest pairingRequest = PairingRequestBuilderTest.buildRequest3(true);
        commonPrintInput(pairingRequest);
        PairingResponse pairingResponse = pairingService.service(pairingRequest);
        commonTestAndPrintOutput(pairingResponse, 1);
    }
    
    @Test
    public void buildAndPair4() {
        PairingRequest pairingRequest = PairingRequestBuilderTest.buildRequest4();
        commonPrintInput(pairingRequest);
        PairingResponse pairingResponse = pairingService.service(pairingRequest);
        commonTestAndPrintOutput(pairingResponse, 1);
        Map<String, AccountPairingResponse> responseByAccount = pairingResponse.getResultsByAccount();
        Map<String, List<Strategy>> account3result = responseByAccount.get("account4").getStrategies();
        boolean found = findStrategy(account3result, "GPRO", "PutUnpairedShort", 10, new BigDecimal("13430.00"));
        assertTrue(found);
        found = findStrategy(account3result, "GPRO", "CallUnpairedShort", 10, new BigDecimal("7610.00"));
        assertTrue(found);
    }
    
    @Test
    public void buildAndPair5() {
        PairingRequest pairingRequest = PairingRequestBuilderTest.buildRequest5();
        commonPrintInput(pairingRequest);
        PairingResponse pairingResponse = pairingService.service(pairingRequest);
        commonTestAndPrintOutput(pairingResponse, 2);
        
        Map<String, AccountPairingResponse> responseByAccount = pairingResponse.getResultsByAccount();
        Map<String, List<Strategy>> account5result = responseByAccount.get("account5").getStrategies();
        
        // find the 5 covered call, that should have matched with the quantity -5 strike 40 calls b/c they are lower strike
        boolean found = findStrategy(account5result, "GPRO", "CoveredCall", 5, new BigDecimal("0"));
        assertTrue(found);
        
        // and find the 6 quantity covered put, that should have matched with the quantity -6 strike 45 puts b/c they are higher strike
        Map<String, List<Strategy>> account6result = responseByAccount.get("account5_1").getStrategies();
        found = findStrategy(account6result, "GPRO", "CoveredPut", 6, new BigDecimal("0"));
        assertTrue(found);
    }
    
    @Test
    public void buildAndPair6() {
        PairingRequest pairingRequest = PairingRequestBuilderTest.buildRequest6();
        commonPrintInput(pairingRequest);
        PairingResponse pairingResponse = pairingService.service(pairingRequest);
        commonTestAndPrintOutput(pairingResponse, 2);
    }
    
    @Test
    public void buildAndPair7() {
        PairingRequest pairingRequest = PairingRequestBuilderTest.buildRequest7();
        commonPrintInput(pairingRequest);
        PairingResponse pairingResponse = pairingService.service(pairingRequest);
        commonTestAndPrintOutput(pairingResponse, 2);
        
        Map<String, AccountPairingResponse> responseByAccount = pairingResponse.getResultsByAccount();
        Map<String, List<Strategy>> account71result = responseByAccount.get("account7_1").getStrategies();
        boolean found = findStrategy(account71result, "GPRO", "IronCondorCalendarLong", 8, new BigDecimal("0"));
        assertTrue(found);
        found = findStrategy(account71result, "GPRO", "PutVerticalCalendarLong", 2, new BigDecimal("0"));
        assertTrue(found);
        
        Map<String, List<Strategy>> account7result = responseByAccount.get("account7").getStrategies();
        found = findStrategy(account7result, "GPRO", "IronCondorCalendarShort", 8, new BigDecimal("8000"));
        assertTrue(found);
        found = findStrategy(account7result, "GPRO", "PutVerticalCalendarShort", 2, new BigDecimal("2000"));
        assertTrue(found);
    }
    
    private void commonTestAndPrintOutput(PairingResponse pairingResponse, int accountsInRequest) {
        StringBuilder sb = new StringBuilder();
        assertNotNull(pairingResponse);
        Map<String, AccountPairingResponse> responseByAccount = pairingResponse.getResultsByAccount();
        assertNotNull(responseByAccount);
        assertEquals(accountsInRequest, responseByAccount.size());
        for (Map.Entry<String, AccountPairingResponse> entry : responseByAccount.entrySet()) {
            String accountId = entry.getKey();
            AccountPairingResponse accountResponse = entry.getValue();
            Map<String, List<Strategy>> strategies = accountResponse.getStrategies();
            BigDecimal totalMaintMargin = accountResponse.getTotalMaintenanceMargin();
            BigDecimal totalInitialMargin = accountResponse.getTotalInitialMargin();
            Map<String, Map<String, List<Strategy>>> allStrategyListResults = accountResponse.getAllStrategyListResults();
            sb.append("AccountID '").append(accountId).append("' total initial margin=").append(totalInitialMargin).append(" total maintenance margin=").append(totalMaintMargin);
            if (allStrategyListResults == null) {
                sb.append(", strategies:").append("\n");
                for (Map.Entry<String, List<Strategy>> entry2 : strategies.entrySet()) {
                    sb.append("Option root '").append(entry2.getKey()).append("'\n");
                    for (Strategy strategy : entry2.getValue()) {
                        sb.append(strategy).append("\n");
                    }
                } 
                sb.append("all strategy groups by root:").append("\n");
                sb.append(accountResponse.getStrategyGroupByRoot()).append("\n");
            } else {
                sb.append("' all strategy lists:").append("\n");
                for (Map.Entry<String, Map<String, List<Strategy>>> entry2 : allStrategyListResults.entrySet()) {
                    sb.append("Option root '").append(entry2.getKey()).append("'\n");
                    for (Map.Entry<String, List<Strategy>> strategyGroupList : entry2.getValue().entrySet()) {
                        sb.append(strategyGroupList.getKey()).append("\n");
                        for (Strategy strategy : strategyGroupList.getValue()) {
                            sb.append(strategy).append("\n");
                        }
                    }
                } 
            }
        }
        System.out.println(sb.toString());
    }
    
    private void commonPrintInput(PairingRequest pairingRequest) {
        StringBuilder sb = new StringBuilder();
        sb.append("Input for PairingRequest\n");
        pairingRequest.getOptionRoots().values().forEach( root -> {
            sb.append(root.toString());
        });
        sb.append("\n");
        pairingRequest.getAccounts().forEach( act -> {
            sb.append("Account: ").append(act.getAccountId()).append("\nPositions:\n");
            act.getPositions().forEach( pos -> {
                sb.append(pos).append("\n");
            });
        });
        System.out.println(sb.toString());
    }
    
    private boolean findStrategy(Map<String, List<Strategy>> strategyMap, String optionRoot, String strategyName, 
            Integer quantity, BigDecimal margin) {
        boolean found = false;
        List<Strategy> strategyResultList = strategyMap.get(optionRoot);
        for (Strategy strategy : strategyResultList) {
            if (strategyName.equals(strategy.getStrategyName())) {
                BigDecimal strategyMargin = strategy.getMaintenanceMargin();
                Integer strategyQuantity = strategy.getQuantity();
                found = (strategyMargin.compareTo(margin) == 0 && strategyQuantity.compareTo(quantity) == 0);
                if (found) break;
            }
        }
        return found;
    }
    
}
